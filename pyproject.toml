[tool.black]
line-length = 99
target-version = ["py38", "py39", "py310", "py311"]
skip-magic-trailing-comma = true
force-exclude = '''
^/test-data
'''

[tool.ruff]
# Enable the pycodestyle (`E`) and Pyflakes (`F`) rules by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E", "F"]
ignore = [
  "B006",  # use of mutable defaults in function signatures
  "B007",  # Loop control variable not used within the loop body.
  "B011",  # Don't use assert False
  "B023",  # Function definition does not bind loop variable
  "E203",  # conflicts with black
  "E402",  # module level import not at top of file
  "E501",  # conflicts with black
  "E731",  # Do not assign a `lambda` expression, use a `def`
  "E741",  # Ambiguous variable name
  "F401",  # temporarily remove import check
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]
per-file-ignores = {}

# Same as Black.
line-length = 99

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py311"

[tool.ruff.isort]
combine-as-imports = true
extra-standard-library = ["typing_extensions"]

[tool.bandit]
exclude_dirs = ["venv", "tests", "apps/conftest.py"]


[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
exclude = [
    '^file1\.py$',  # TOML literal string (single-quotes, no escaping necessary)
    "^file2\\.py$",  # TOML basic string (double-quotes, backslash and other characters need escaping)
    "tests",
    "apps/conftest.py",
]

[tool.pytest.ini_options]
minversion = "6.0.0"
testpaths = []
python_files = 'test*.py'
# always run in parallel (requires pytest-xdist, see tests-requirements.txt)
# and enable strict mode: require all markers
# to be defined and raise on invalid config values
addopts = "--strict-markers --strict-config --color=yes"
asyncio_mode = "auto"

log_cli = true
log_cli_level = "INFO"

# treat xpasses as tests failures so they get converted to regular tests as soon as possible
xfail_strict = true

[tool.coverage.run]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
skip_covered = true
omit = ''
exclude_lines = [
  '\#\s*pragma: no cover',
  '^\s*raise AssertionError\b',
  '^\s*raise NotImplementedError\b',
  '^\s*return NotImplemented\b',
  '^\s*raise$',
  '''^if __name__ == ['"]__main__['"]:$''',
]
