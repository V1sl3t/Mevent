openapi: 3.1.0
info:
  title: Swagger eventstore - OpenAPI 3.1
  description: >-
    This is a sample meetups app based on the OpenAPI 3.1 specification.
    Some useful links:
    - [The meetups repository](https://github.com/jakkemomo/meetups)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
tags:
  - name: events
    description: Everything about your events
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: users
    description: Operations about users
paths:
  /events:
    post:
      tags:
        - events
      summary: Add a new event to the store
      description: Add a new event to the store
      operationId: addevent
      requestBody:
        description: Create a new event in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/events'
          application/xml:
            schema:
              $ref: '#/components/schemas/events'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/events'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
            application/xml:
              schema:
                $ref: '#/components/schemas/events'
        '405':
          description: Invalid input
      security:
        - eventstore_auth:
            - write:events
            - read:events
  /events/{eventId}:
    get:
      tags:
        - events
      summary: Find event by ID
      description: Returns a single event
      operationId: geteventById
      parameters:
        - name: eventId
          in: path
          description: ID of event to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
            application/xml:
              schema:
                $ref: '#/components/schemas/events'
        '400':
          description: Invalid ID supplied
        '404':
          description: events not found
      security:
        - api_key: []
        - eventstore_auth:
            - write:events
            - read:events
    put:
      tags:
        - events
      summary: Update an existing event
      description: Update an existing event by Id
      operationId: updateevent
      requestBody:
        description: Update an existent event in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/events'
          application/xml:
            schema:
              $ref: '#/components/schemas/events'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/events'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
            application/xml:
              schema:
                $ref: '#/components/schemas/events'
        '400':
          description: Invalid ID supplied
        '404':
          description: event not found
        '405':
          description: Validation exception
      security:
        - eventstore_auth:
            - write:events
            - read:events
    delete:
      tags:
        - events
      summary: Deletes a event
      description: delete a event
      operationId: deleteevent
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: eventId
          in: path
          description: event id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid event value
      security:
        - eventstore_auth:
            - write:events
            - read:events
  /users/signup:
    post:
      tags:
        - users
      summary: Registration of users
      description: This can only be done by the new users
      operationId: createUser
      requestBody:
        description: Created users object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /users/login:
    get:
      tags:
        - users
      summary: Logs users into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The users name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the users
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - users
      summary: Logs out current logged in users session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /users/{user_id}:
    get:
      tags:
        - users
      summary: Get users by users id
      description: ''
      operationId: getUserByName
      parameters:
        - name: id
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
    put:
      tags:
        - users
      summary: Update users
      description: This can only be done by the logged in users.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent users in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - users
      summary: Delete users
      description: This can only be done by the logged in users.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        password:
          type: string
          example: '12345'
      xml:
        name: users
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Meeting
      xml:
        name: category
    events:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Minsk python meetup
        category:
          $ref: '#/components/schemas/Category'
        description:
          type: string
          description: Event description
        address:
          type: string
          description: Event address
        user_id:
          type: integer
          description: Event creator id
        start_date:
          type: string
          description: Event start date
        end_date:
          type: string
          description: Event end date
        created_at:
          type: string
          description: Event creation date
      xml:
        name: events
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    events:
      description: events object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/events'
        application/xml:
          schema:
            $ref: '#/components/schemas/events'
    UserArray:
      description: List of users object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    eventstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://eventstore3.swagger.io/oauth/authorize
          scopes:
            write:events: modify events in your account
            read:events: read your events
    api_key:
      type: apiKey
      name: api_key
      in: header
